// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "news-api/internal/user/domain"
	errs "news-api/pkg/errs"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// CheckJWT provides a mock function with given fields: ctx, Id
func (_m *Service) CheckJWT(ctx context.Context, Id uuid.UUID) (*domain.Verification, errs.Error) {
	ret := _m.Called(ctx, Id)

	var r0 *domain.Verification
	var r1 errs.Error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*domain.Verification, errs.Error)); ok {
		return rf(ctx, Id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *domain.Verification); ok {
		r0 = rf(ctx, Id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Verification)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) errs.Error); ok {
		r1 = rf(ctx, Id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errs.Error)
		}
	}

	return r0, r1
}

// CheckVerified provides a mock function with given fields: ctx, Id
func (_m *Service) CheckVerified(ctx context.Context, Id uuid.UUID) (*bool, errs.Error) {
	ret := _m.Called(ctx, Id)

	var r0 *bool
	var r1 errs.Error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*bool, errs.Error)); ok {
		return rf(ctx, Id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *bool); ok {
		r0 = rf(ctx, Id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bool)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) errs.Error); ok {
		r1 = rf(ctx, Id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errs.Error)
		}
	}

	return r0, r1
}

// CreateUser provides a mock function with given fields: ctx, model
func (_m *Service) CreateUser(ctx context.Context, model *domain.User) errs.Error {
	ret := _m.Called(ctx, model)

	var r0 errs.Error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.User) errs.Error); ok {
		r0 = rf(ctx, model)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errs.Error)
		}
	}

	return r0
}

// CreateVerification provides a mock function with given fields: ctx, model
func (_m *Service) CreateVerification(ctx context.Context, model *domain.Verification) errs.Error {
	ret := _m.Called(ctx, model)

	var r0 errs.Error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Verification) errs.Error); ok {
		r0 = rf(ctx, model)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errs.Error)
		}
	}

	return r0
}

// Login provides a mock function with given fields: ctx, username, email
func (_m *Service) Login(ctx context.Context, username string, email string) (*domain.User, errs.Error) {
	ret := _m.Called(ctx, username, email)

	var r0 *domain.User
	var r1 errs.Error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*domain.User, errs.Error)); ok {
		return rf(ctx, username, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *domain.User); ok {
		r0 = rf(ctx, username, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) errs.Error); ok {
		r1 = rf(ctx, username, email)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errs.Error)
		}
	}

	return r0, r1
}

// StoreJWT provides a mock function with given fields: ctx, jwt, Id
func (_m *Service) StoreJWT(ctx context.Context, jwt string, Id uuid.UUID) errs.Error {
	ret := _m.Called(ctx, jwt, Id)

	var r0 errs.Error
	if rf, ok := ret.Get(0).(func(context.Context, string, uuid.UUID) errs.Error); ok {
		r0 = rf(ctx, jwt, Id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errs.Error)
		}
	}

	return r0
}

// UpdateVerification provides a mock function with given fields: ctx, Id
func (_m *Service) UpdateVerification(ctx context.Context, Id uuid.UUID) errs.Error {
	ret := _m.Called(ctx, Id)

	var r0 errs.Error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) errs.Error); ok {
		r0 = rf(ctx, Id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errs.Error)
		}
	}

	return r0
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
