// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "news-api/internal/news/domain"
	errs "news-api/pkg/errs"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// CreateCategories provides a mock function with given fields: ctx, model
func (_m *Service) CreateCategories(ctx context.Context, model *domain.Categories) errs.Error {
	ret := _m.Called(ctx, model)

	var r0 errs.Error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Categories) errs.Error); ok {
		r0 = rf(ctx, model)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errs.Error)
		}
	}

	return r0
}

// CreateComment provides a mock function with given fields: ctx, model
func (_m *Service) CreateComment(ctx context.Context, model *domain.Comment) errs.Error {
	ret := _m.Called(ctx, model)

	var r0 errs.Error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Comment) errs.Error); ok {
		r0 = rf(ctx, model)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errs.Error)
		}
	}

	return r0
}

// CreateCustom provides a mock function with given fields: ctx, model
func (_m *Service) CreateCustom(ctx context.Context, model *domain.Custom) errs.Error {
	ret := _m.Called(ctx, model)

	var r0 errs.Error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Custom) errs.Error); ok {
		r0 = rf(ctx, model)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errs.Error)
		}
	}

	return r0
}

// CreateNews provides a mock function with given fields: ctx, model
func (_m *Service) CreateNews(ctx context.Context, model *domain.News) errs.Error {
	ret := _m.Called(ctx, model)

	var r0 errs.Error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.News) errs.Error); ok {
		r0 = rf(ctx, model)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errs.Error)
		}
	}

	return r0
}

// DeleteCategories provides a mock function with given fields: ctx, Id
func (_m *Service) DeleteCategories(ctx context.Context, Id uuid.UUID) errs.Error {
	ret := _m.Called(ctx, Id)

	var r0 errs.Error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) errs.Error); ok {
		r0 = rf(ctx, Id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errs.Error)
		}
	}

	return r0
}

// DeleteCustom provides a mock function with given fields: ctx, Id
func (_m *Service) DeleteCustom(ctx context.Context, Id uuid.UUID) errs.Error {
	ret := _m.Called(ctx, Id)

	var r0 errs.Error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) errs.Error); ok {
		r0 = rf(ctx, Id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errs.Error)
		}
	}

	return r0
}

// DeleteNews provides a mock function with given fields: ctx, Id
func (_m *Service) DeleteNews(ctx context.Context, Id uuid.UUID) errs.Error {
	ret := _m.Called(ctx, Id)

	var r0 errs.Error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) errs.Error); ok {
		r0 = rf(ctx, Id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errs.Error)
		}
	}

	return r0
}

// GetCategories provides a mock function with given fields: ctx
func (_m *Service) GetCategories(ctx context.Context) (*[]domain.Categories, errs.Error) {
	ret := _m.Called(ctx)

	var r0 *[]domain.Categories
	var r1 errs.Error
	if rf, ok := ret.Get(0).(func(context.Context) (*[]domain.Categories, errs.Error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *[]domain.Categories); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]domain.Categories)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) errs.Error); ok {
		r1 = rf(ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errs.Error)
		}
	}

	return r0, r1
}

// GetCustom provides a mock function with given fields: ctx
func (_m *Service) GetCustom(ctx context.Context) (*[]domain.Custom, errs.Error) {
	ret := _m.Called(ctx)

	var r0 *[]domain.Custom
	var r1 errs.Error
	if rf, ok := ret.Get(0).(func(context.Context) (*[]domain.Custom, errs.Error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *[]domain.Custom); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]domain.Custom)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) errs.Error); ok {
		r1 = rf(ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errs.Error)
		}
	}

	return r0, r1
}

// GetDetailCategories provides a mock function with given fields: ctx, Id
func (_m *Service) GetDetailCategories(ctx context.Context, Id uuid.UUID) (*domain.Categories, errs.Error) {
	ret := _m.Called(ctx, Id)

	var r0 *domain.Categories
	var r1 errs.Error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*domain.Categories, errs.Error)); ok {
		return rf(ctx, Id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *domain.Categories); ok {
		r0 = rf(ctx, Id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Categories)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) errs.Error); ok {
		r1 = rf(ctx, Id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errs.Error)
		}
	}

	return r0, r1
}

// GetDetailCustom provides a mock function with given fields: ctx, Id
func (_m *Service) GetDetailCustom(ctx context.Context, Id uuid.UUID) (*domain.Custom, errs.Error) {
	ret := _m.Called(ctx, Id)

	var r0 *domain.Custom
	var r1 errs.Error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*domain.Custom, errs.Error)); ok {
		return rf(ctx, Id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *domain.Custom); ok {
		r0 = rf(ctx, Id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Custom)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) errs.Error); ok {
		r1 = rf(ctx, Id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errs.Error)
		}
	}

	return r0, r1
}

// GetDetailNews provides a mock function with given fields: ctx, Id
func (_m *Service) GetDetailNews(ctx context.Context, Id uuid.UUID) (*domain.NewsDetail, errs.Error) {
	ret := _m.Called(ctx, Id)

	var r0 *domain.NewsDetail
	var r1 errs.Error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*domain.NewsDetail, errs.Error)); ok {
		return rf(ctx, Id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *domain.NewsDetail); ok {
		r0 = rf(ctx, Id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.NewsDetail)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) errs.Error); ok {
		r1 = rf(ctx, Id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errs.Error)
		}
	}

	return r0, r1
}

// GetNews provides a mock function with given fields: ctx
func (_m *Service) GetNews(ctx context.Context) (*[]domain.News, errs.Error) {
	ret := _m.Called(ctx)

	var r0 *[]domain.News
	var r1 errs.Error
	if rf, ok := ret.Get(0).(func(context.Context) (*[]domain.News, errs.Error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *[]domain.News); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]domain.News)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) errs.Error); ok {
		r1 = rf(ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errs.Error)
		}
	}

	return r0, r1
}

// SearchCategories provides a mock function with given fields: ctx, title
func (_m *Service) SearchCategories(ctx context.Context, title string) (*domain.Categories, errs.Error) {
	ret := _m.Called(ctx, title)

	var r0 *domain.Categories
	var r1 errs.Error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.Categories, errs.Error)); ok {
		return rf(ctx, title)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Categories); ok {
		r0 = rf(ctx, title)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Categories)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) errs.Error); ok {
		r1 = rf(ctx, title)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errs.Error)
		}
	}

	return r0, r1
}

// UpdateCategories provides a mock function with given fields: ctx, model
func (_m *Service) UpdateCategories(ctx context.Context, model *domain.Categories) errs.Error {
	ret := _m.Called(ctx, model)

	var r0 errs.Error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Categories) errs.Error); ok {
		r0 = rf(ctx, model)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errs.Error)
		}
	}

	return r0
}

// UpdateCustom provides a mock function with given fields: ctx, model
func (_m *Service) UpdateCustom(ctx context.Context, model *domain.Custom) errs.Error {
	ret := _m.Called(ctx, model)

	var r0 errs.Error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Custom) errs.Error); ok {
		r0 = rf(ctx, model)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errs.Error)
		}
	}

	return r0
}

// UpdateNews provides a mock function with given fields: ctx, model
func (_m *Service) UpdateNews(ctx context.Context, model *domain.News) errs.Error {
	ret := _m.Called(ctx, model)

	var r0 errs.Error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.News) errs.Error); ok {
		r0 = rf(ctx, model)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errs.Error)
		}
	}

	return r0
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
